DESIGN DATABASE DAN ERD

- Bagaimana cara membuat data base yang efisien
- Bagaimana cara untuk merancang database
- Bagaimana cara untuk merancang ERD

ERD (Entity-Relational-Database)
ERD, atau Entity-Relationship Diagram, adalah representasi grafis dari struktur data dalam sistem basis data. Diagram ini digunakan untuk menggambarkan hubungan antara entitas (objek) dalam suatu sistem dan atribut yang dimiliki oleh entitas tersebut. ERD sangat berguna dalam tahap perancangan basis data, karena membantu pengembang dan pemangku kepentingan untuk memahami bagaimana data akan disimpan, diorganisir, dan dihubungkan.

Komponen Utama dalam ERD
1. Entitas:
- Entitas adalah objek atau hal yang memiliki keberadaan dalam sistem dan dapat diidentifikasi secara unik. Contoh entitas termasuk 'Customer', 'Order', 'Product', dan 'Employee'.
- Dalam diagram, entitas biasanya digambarkan sebagai persegi panjang.

2. Atribut:
- Atribut adalah karakteristik atau properti yang dimiliki oleh entitas. Misalnya, entitas Customer mungkin memiliki atribut seperti 'CustomerID', 'Name', 'Email', dan 'PhoneNumber'.
- Atribut biasanya digambarkan sebagai elips yang terhubung ke entitas.

3. Hubungan (Relationship):
- Hubungan menggambarkan bagaimana entitas berinteraksi satu sama lain. Misalnya, hubungan antara 'Customer' dan 'Order' menunjukkan bahwa seorang pelanggan dapat membuat satu atau lebih pesanan.
- Hubungan biasanya digambarkan sebagai garis yang menghubungkan entitas, dengan simbol yang menunjukkan kardinalitas (misalnya, satu-ke-satu, satu-ke-banyak, atau banyak-ke-banyak).

Kardinalitas
Kardinalitas menunjukkan jumlah entitas yang dapat terlibat dalam suatu hubungan. Beberapa jenis kardinalitas yang umum digunakan adalah:

- Satu-ke-Satu (1:1): Setiap entitas dalam satu tabel berhubungan dengan satu entitas di tabel lain.
Contoh: Hubungan antara tabel User dan UserProfile (setiap pengguna hanya punya 1 profil). conto implementasi sql:
CREATE TABLE User (
    user_id INT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE
);

CREATE TABLE UserProfile (
    profile_id INT PRIMARY KEY,
    user_id INT UNIQUE,  -- Kunci asing dengan constraint UNIQUE
    full_name VARCHAR(100),
    phone VARCHAR(15),
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

1 baris di 'User' hanya terkait dengan 1 baris di 'UserProfile'(via 'user_id' yang UNIQUE)

- Satu-ke-Banyak (1:N): Satu entitas dalam satu tabel dapat berhubungan dengan banyak entitas di tabel lain.
Contoh: Hubungan antara Department dan Employee (1 departemen punya banyak karyawan). conto implementasi sql:
CREATE TABLE Department (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50) NOT NULL
);

CREATE TABLE Employee (
    emp_id INT PRIMARY KEY,
    dept_id INT,  -- Kunci asing TANPA UNIQUE
    emp_name VARCHAR(100),
    salary DECIMAL(10,2),
    FOREIGN KEY (dept_id) REFERENCES Department(dept_id)
);
1 baris di Department bisa terkait dengan banyak baris di Employee (misal: departemen "IT" punya 100 karyawan).

- Banyak-ke-Banyak (M:N): Banyak entitas dalam satu tabel dapat berhubungan dengan banyak entitas di tabel lain.
Contoh: Hubungan antara Student dan Course (mahasiswa bisa ambil banyak kursus, dan kursus bisa diambil banyak mahasiswa). conto implementasi sql:
CREATE TABLE Student (
    student_id INT PRIMARY KEY,
    student_name VARCHAR(100) NOT NULL
);

CREATE TABLE Course (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(50) NOT NULL
);

-- Tabel penghubung (junction table)
CREATE TABLE Enrollment (
    student_id INT,
    course_id INT,
    enrollment_date DATE,
    PRIMARY KEY (student_id, course_id),  -- Kunci komposit
    FOREIGN KEY (student_id) REFERENCES Student(student_id),
    FOREIGN KEY (course_id) REFERENCES Course(course_id)
);
- Tabel Enrollment menghubungkan Student dan Course dengan kunci asing ganda.
- Contoh data:
  Mahasiswa A (student_id=1) mengambil kursus X (course_id=101) dan Y (course_id=102).
  Kursus X (course_id=101) diambil oleh mahasiswa A (student_id=1) dan B (student_id=2).

CATATAN PENTING:
- Untuk relasi M:N, selalu butuh table ketiga (junction table).
- Gunakan 'ON ELETE CASCADE' jika ingin data terkait terhapus otomatis. conto: FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE

PERBEDAAN UTAMA
- Relasi = 1. '1':1 2. '1:N'
- Ciri Kunci = 1. 'Kunci asing + UNIQUE' 2. 'Kunci asing tanpa UNIQUE' 3. M:N
- Tabel Tambahan = 1. 'Tidak perlu' 2. 'Tidak perlu' 3. 'Diperlukan'
- Contoh Nyata = 1. 'User<-->Profil' 2. 'Departemen' 3. Mahasiswa <--> Kursus(via Enrollment)